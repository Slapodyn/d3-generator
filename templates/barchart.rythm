@import ca.arini.d3_generator.service.BarChartOrder
@args String measureOperation;
@args String measureColumn; 
@args String categoryColumn;
@args BarChartOrder order;
@{
  boolean isAggregated = "sum".equals(measureOperation);
  boolean isOrdered = BarChartOrder.ORIGINAL != order;
 
  String dataVar = "data";
  
  if (isAggregated) {
  	dataVar = "aggregatedData";
  }
  
  if (isOrdered) {
  	dataVar = "sortedData";
  }
}@
@if (isAggregated) {
// data aggregation
aggregatedData = _.map(_.groupBy(data, function(d) { return d['@categoryColumn']; }), function(group) {
  return {
    'label': group[0]['@categoryColumn'],
    'value': d3.sum(group, function(d) { return d['@measureColumn']; })
  };
});
} 
// accessor functions @if (isAggregated) {
barLabel = function(d) { return d.label; };
barValue = function(d) { return d.value; };
} else {
barLabel = function(d) { return d['@categoryColumn']; };
barValue = function(d) { return parseFloat(d['@measureColumn']); };
} @if (BarChartOrder.VALUE_ASCENDING == order) {
// sorting
sortedData = _.sortBy(@if (isAggregated) {aggregatedData} else {data}, barValue);
} else if (BarChartOrder.VALUE_DESCENDING == order) {
// sorting
sortedData = _.sortBy(@if (isAggregated) {aggregatedData} else {data}, function(d) { return -1 * barValue(d); });
} else if (BarChartOrder.LABEL_ALPHABETICAL == order) {
// sorting
sortedData = _.sortBy(@if (isAggregated) {aggregatedData} else {data}, barLabel);
}
// render data
labels = _.map(@(dataVar), barLabel);
values = _.map(@(dataVar), barValue); 
@nocompact() {}
// basic settings
paddingRight = 40;
barHeight = 20;
labelPadding = 5;
gridLabelHeight = 18;
gridLabelPaddingBottom = 3;
maxBarLabelWidth = 100;
maxBarWidth = 420;
@nocompact() {}
// scales
y = d3.scale.ordinal().domain(labels).rangeBands([0, labels.length * barHeight]);
x = d3.scale.linear().domain([0, d3.max(values)]).range([0, maxBarWidth]);
@nocompact() {}
// svg container element
chart = d3.select('#chart').append("svg")
  .attr('width', maxBarWidth + maxBarLabelWidth + paddingRight)
  .attr('height', gridLabelHeight + gridLabelPaddingBottom + @(dataVar).length * barHeight);
@nocompact() {}
// grid line labels
gridContainer = chart.append('g')
  .attr('transform', 'translate(' + maxBarLabelWidth + ',' + gridLabelHeight + ')'); 
gridContainer.selectAll("text").data(x.ticks(10)).enter().append("text")
  .attr("x", x)
  .attr("dy", -3)
  .attr("text-anchor", "middle")
  .text(String);
@nocompact() {}
// vertical grid lines
gridContainer.selectAll("line").data(x.ticks(10)).enter().append("line")
  .attr("x1", x)
  .attr("x2", x)
  .attr("y1", 0)
  .attr("y2", height + gridLabelPaddingBottom)
  .style("stroke", "#ccc");
@nocompact() {}
// bar labels
labelsContainer = chart.append('g')
  .attr('transform', 'translate(' + (maxBarLabelWidth - labelPadding) + ',' + (gridLabelHeight + gridLabelPaddingBottom) + ')'); 
labelsContainer.selectAll('text').data(labels).enter().append('text')
  .attr('y', function(d) { return y(d) + y.rangeBand() / 2; })
  .attr('stroke', 'none')
  .attr('fill', 'black')
   .attr("dy", ".35em") // vertical-align: middle
  .attr('text-anchor', 'end')
  .text(String);
@nocompact() {}
// bars
barsContainer = chart.append('g')
  .attr('transform', 'translate(' + maxBarLabelWidth + ',' + (gridLabelHeight + gridLabelPaddingBottom) + ')'); 
barsContainer.selectAll("rect").data(values).enter().append("rect")
  .attr('y', y)
  .attr('height', y.rangeBand())
  .attr('width', x)
  .attr('stroke', 'white')
  .attr('fill', 'steelblue');
@nocompact() {}
// bar value labels
barsContainer.selectAll("text").data(values).enter().append("text")
  .attr("x", x)
  .attr("y", function(d) { return y(d) + y.rangeBand() / 2; })
  .attr("dx", 3) // padding-left
  .attr("dy", ".35em") // vertical-align: middle
  .attr("text-anchor", "start") // text-align: right
  .attr("fill", "black")
  .attr("stroke", "none")
  .text(function(d) { return d3.round(d, 2); });
@nocompact() {}
// start line
barsContainer.append("line")
  .attr("y1", -gridLabelPaddingBottom)
  .attr("y2", height + gridLabelPaddingBottom)
  .style("stroke", "#000");